"use strict";(self.webpackChunk_grams_dev_wiki=self.webpackChunk_grams_dev_wiki||[]).push([[7315],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3529:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},s="Subjects 101",o={unversionedId:"develop/subjects/101",id:"develop/subjects/101",title:"Subjects 101",description:"Subjects form the backbone of decentralized development in Grams. Subjects is an interface definition language and set of tools that allows developers to build decentralized applications in multiple languages. A Subjects model enables developers compose different subjective views for their application's state and behavior, as well as define the rules for their interactions.",source:"@site/docs/develop/subjects/101.md",sourceDirName:"develop/subjects",slug:"/develop/subjects/101",permalink:"/ar/docs/develop/subjects/101",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"developSidebar",previous:{title:"Subjects",permalink:"/ar/docs/develop/subjects/"},next:{title:"Specification",permalink:"/ar/docs/develop/subjects/specification/"}},l={},c=[{value:"Anatomy of a Subject",id:"anatomy-of-a-subject",level:2},{value:"Example of a Subject Model",id:"example-of-a-subject-model",level:2},{value:"Getting Started with Subjects",id:"getting-started-with-subjects",level:2},{value:"Shapes and Traits",id:"shapes-and-traits",level:2},{value:"Shapes",id:"shapes",level:3},{value:"Traits",id:"traits",level:3},{value:"Building the model",id:"building-the-model",level:2},{value:"Next Steps",id:"next-steps",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subjects-101"},"Subjects 101"),(0,i.kt)("p",null,"Subjects form the backbone of decentralized development in Grams. Subjects is an interface definition language and set of tools that allows developers to build decentralized applications in multiple languages. A Subjects model enables developers compose different subjective views for their application's state and behavior, as well as define the rules for their interactions."),(0,i.kt)("h2",{id:"anatomy-of-a-subject"},"Anatomy of a Subject"),(0,i.kt)("p",null,"The term \u201csubject\u201d  defines the idea of reflecting a smaller, more focused perception of a complex shared model, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"State"),": Represents current data or status."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Behavior"),": Dictates the Subject's actions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Triggers"),": Events a Subject can initiate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Subscriptions"),": Monitors specific events to invoke certain behaviors.")),(0,i.kt)("h2",{id:"example-of-a-subject-model"},"Example of a Subject Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'subject Organization {\n   version: "1.0.0"\n   state: [Team]\n   behaviors: [JoinTeam]\n}\n\nstate Team {\n   members: TeamMembers\n}\n\nlist TeamMembers {\n   member: TeamMember\n}\n\nstructure TeamMember {\n   @required\n   name: string\n}\n\nbehavior JoinTeam {\n   input: string\n}\n')),(0,i.kt)("admonition",{title:"What's this syntax?",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Subject models are defined using either the ",(0,i.kt)("a",{parentName:"p",href:"specification/idl"},"Subjects IDL")," or the ",(0,i.kt)("a",{parentName:"p",href:"specification/ast"},"JSON AST"),". The JSON AST representation of a model is typically an artifact created by build tools to make them easier to use by other tooling.")),(0,i.kt)("h2",{id:"getting-started-with-subjects"},"Getting Started with Subjects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Desktop App"),": For a visual approach, our application interface is available for ",(0,i.kt)("a",{parentName:"li",href:"https://grams.dev/download/"},"download"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CLI"),": For terminal enthusiasts:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @grams-dev/subjects\ngsx create myNamespace # or use 'gsx init myNamespace' to add it to your existing package\n")))),(0,i.kt)("p",null,"Creating a new subject namespace will create the below folder structure in the terminal's working directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"- myNamespace/\n   - subjects/\n      - myNamespace.subject\n   - .gitignore\n   - subjects-build.json\n   - package-lock.json\n   - package.json\n   - README.md\n   - tsconfig.json\n")),(0,i.kt)("p",null,"Subjects are declared inside a namespace to provide an encapsulation for multiple subjects and contracts within an application. We therefore recommend using ",(0,i.kt)("inlineCode",{parentName:"p"},"gsx")," at the root of your npm package."),(0,i.kt)("admonition",{title:"Want a complete dApp?",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Try out our package manager ",(0,i.kt)("a",{parentName:"p",href:"#"},(0,i.kt)("inlineCode",{parentName:"a"},"gpm"))," which simplifies creating and managing complete decentralized applications.")),(0,i.kt)("h2",{id:"shapes-and-traits"},"Shapes and Traits"),(0,i.kt)("p",null,"A Subjects model consists of shapes and traits. Shapes are instances of types. Traits are used to add more information to shapes that might be useful for transpiling, building, or documentation."),(0,i.kt)("h3",{id:"shapes"},"Shapes"),(0,i.kt)("p",null,"Shape types are grouped into three categories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/types/simple"},"Simple types"),": Simple types are types that do not contain nested types or shape references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/types/aggregate"},"Aggregate types"),": Aggregate types contain configurable member references to others shapes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/types/subject"},"Subject types"),": Types that define a Subject and its nested members like state and behaviors.")),(0,i.kt)("h3",{id:"traits"},"Traits"),(0,i.kt)("p",null,"Trait types are grouped into five core categories, but you can create as many as you would like!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/traits/constraint"},"Constraint traits"),": Traits that define constraints and validations for data shapes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/traits/refinement"},"Type Refinement traits"),": Traits used to refine and change data types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/traits/behavior"},"Behavior traits"),": Traits that alter the behavior and functionality of data shapes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/traits/documentation"},"Documentation traits"),": Traits for documenting and providing metadata about data shapes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"specification/traits/subject"},"Subject Traits"),": Traits specific to subjects, defining their characteristics and behavior.")),(0,i.kt)("h2",{id:"building-the-model"},"Building the model"),(0,i.kt)("p",null,"You can build your model against any of the supported plugins, or even create your own plugin. Simply run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gsx build\n")),(0,i.kt)("p",null,"Building a more customized Subjects model requires modifying the configuration file, subjects-build.json. This file is used to describe how a model is created and what projections of the model to create, as well as which plugins to run."),(0,i.kt)("p",null,"The following is an example subjects-build.json configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n   "namespace": "my.namespace"\n   "version": "1.0",\n   "license": "Apache-2.0",\n   "sources": ["subjects"],\n   "plugins": [\n      {\n         "name": "ast",\n         "outputDirectory": "model"\n      },\n      {\n         "name": "typescript",\n         "outputDirectory": "client"\n      },\n      {\n         "name": "solidity",\n         "outputDirectory": "contracts"\n      }\n   ]\n}\n')),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"There's plenty more to explore in Subjects. The ",(0,i.kt)("a",{parentName:"p",href:"specification/"},"Subjects specification")," can teach you everything you need to know about the Subjects model. ",(0,i.kt)("a",{parentName:"p",href:"guides/"},"Guides")," can teach you more about the build process, including how to use transformations, projections, plugins, and more. ",(0,i.kt)("a",{parentName:"p",href:"advanced/"},"Advanced Guides")," will cover topics including managing registeries and creating custom plugins."))}d.isMDXComponent=!0}}]);